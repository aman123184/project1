import socket
import subprocess
import requests
import nmap

def scan_ports(host):
    print(f"Scanning ports for {host}...")
    open_ports = []
    for port in range(1, 1024):  # Scanning first 1024 ports
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex((host, port))
        if result == 0:
            open_ports.append(port)
        sock.close()
    return open_ports

def get_service_version(host, port):
    nm = nmap.PortScanner()
    nm.scan(host, str(port))
    service_info = nm[host]['tcp'][port]['product'] + " " + nm[host]['tcp'][port]['version']
    return service_info

def check_for_vulnerabilities(service, version):
    # For simplicity, you can maintain a dictionary of known vulnerabilities
    known_vulns = {
        "Apache": {"2.4.48": "Outdated version. Vulnerable to CVE-2021-XXXX"},
        "MySQL": {"5.7": "Potential SQL injection vulnerability"}
    }
    if service in known_vulns and version in known_vulns[service]:
        return known_vulns[service][version]
    return "No known vulnerabilities"

def main():
    target = input("Enter the website or IP address to scan: ")
    
    # Scan for open ports
    open_ports = scan_ports(target)
    print(f"Open ports: {open_ports}")
    
    for port in open_ports:
        try:
            # Identify the service running on the port
            service_info = get_service_version(target, port)
            print(f"Port {port}: {service_info}")
            
            # Check for known vulnerabilities
            service, version = service_info.split(" ")
            vuln_report = check_for_vulnerabilities(service, version)
            print(f"Vulnerability report for {service} {version}: {vuln_report}")
        
        except Exception as e:
            print(f"Could not identify service/version for port {port}. Error: {e}")
    
    print("Scan completed.")

if _name_ == "_main_":
    main()